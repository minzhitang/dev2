'use strict';

var _request = require("request");
var fs       = require("fs");
var url      = require('url');
var path     = require('path');

module.exports = Xhttp;

function Xhttp() {};


/**
 * http get
 * @param  string   url     请求地址
 * @param  obj   header  自定义header
 * @param  obj   cookies  cookies
 * @param  int   timeout 超时时间，默认三秒
 * @param  int   redo    失败重试次数，默认不重试
 * @return string           请求结果
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2016-01-07
 */
Xhttp.get = function(url, header, cookies, timeout, redo) {
    redo = Number.parseInt(redo) > 0 ? Number.parseInt(redo) : 0;
    let options = _setOption('GET', url, '', '', '', header, cookies, timeout, false);
    return new Promise(function(resolve, reject) {
        _request(options, function(error, response, body) {
            if (error) {
                reject(error);
            }
            resolve(body);
        });
    });
}

/**
 * HTTP Authentication
 * @param  string   url     请求地址
 * @param  string   user     username
 * @param  string   password     password
 * @param  obj   header  自定义header
 * @param  obj   cookies  cookies
 * @param  int   timeout 超时时间，默认三秒
 * @param  int   redo    失败重试次数，默认不重试
 * @return string           请求结果
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2016-01-07
 */
Xhttp.auth = function(url, user, password, header, cookies, timeout, redo) {
    redo = Number.parseInt(redo) > 0 ? Number.parseInt(redo) : 0;
    let options = _setOption('GET', url, user, password, '', header, cookies, timeout, false);
    return new Promise(function(resolve, reject) {
        _request(options, function(error, response, body) {
            if (error) {
                reject(error);
            }
            resolve(body);
        });
    });
}

/**
 * http post
 * @param  string   url     请求地址
 * @param  obj   data     请求参数
 * @param  obj   header  自定义header
 * @param  obj   cookies  cookies
 * @param  int   timeout 超时时间，默认三秒
 * @param  int   redo    失败重试次数，默认不重试
 * @return string           请求结果
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2016-01-07
 */
Xhttp.post = function(url, data, header, cookies, timeout, redo) {
    redo = Number.parseInt(redo) > 0 ? Number.parseInt(redo) : 0;
    let options = _setOption('POST', url, '', '', data, header, cookies, timeout, false);
    return new Promise(function(resolve, reject) {
        _request(options, function(error, response, body) {
            if (error) {
                reject(error);
            }
            resolve(body);
        });
    });
}

/**
 * 上传文件
 * @param  string   url     请求地址
 * @param  obj   data     请求参数
 * @param  obj   header  自定义header
 * @param  obj   cookies  cookies
 * @param  int   timeout 超时时间，默认三秒
 * @param  int   redo    失败重试次数，默认不重试
 * @return string           请求结果
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2016-01-12
 */
Xhttp.upload = function*(url, data, header, cookies, timeout, redo){
    redo = Number.parseInt(redo) > 0 ? Number.parseInt(redo) : 0;
    let options = _setOption('POST', url, '', '', data, header, cookies, timeout, true);
    return new Promise(function(resolve, reject) {
        _request(options, function(error, response, body) {
            if (error) {
                reject(error);
            }
            resolve(body);
        });
    });
}


/**
 * 下载文件
 * @param  {string}   downUrl       下载链接
 * @param  {string}   targetDir     保存目录
 * @param  {string}   targetName    保存文件名
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2016-01-07
 */
Xhttp.download = function*(downUrl, targetDir, targetName) {
    downUrl = downUrl || '';
    let _url = url.parse(downUrl);
    targetName = targetName || path.basename(_url.pathname);
    let targetFile = '';
    if (targetDir) {
        if (!fs.existsSync(targetDir)) {
            _mkdirsSync(targetDir);
        }
        targetFile = path.normalize(targetDir) + '/' + targetName;
    } else {
        targetFile = targetName;
    }
    if (targetFile) {
        _request.get(downUrl).pipe(fs.createWriteStream(targetFile));
    };
}

/**
 * 递归创建目录
 * @param  {string}   dirpath 要创建的目录
 * @param  {string}   mode    目录权限
 * @return {boolen}
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2016-01-07
 */
function _mkdirsSync(dirpath, mode) {
    mode = mode || '0777';
    if (!fs.existsSync(dirpath)) {
        var pathtmp;
        dirpath.split(path.sep).forEach(function(dirname) {
            if (pathtmp) {
                pathtmp = path.join(pathtmp, dirname);
            } else {
                pathtmp = dirname;
            }
            if (!fs.existsSync(pathtmp)) {
                if (!fs.mkdirSync(pathtmp, mode)) {
                    return false;
                }
            }
        });
    }
    return true;
}

/**
 * set request option
 * @param  string   method  请求方法
 * @param  string   url     请求地址
 * @param  string   user     username
 * @param  string   password     password
 * @param  obj   data    请求数据
 * @param  obj   header  header
 * @param  obj   cookies  cookies
 * @param  number   timeout 超时时间，默认三秒
 * @param  boolen   is_upload 是否上传文件，默认否
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2016-01-08
 */
function _setOption(method, url, user, password, data, header, cookies, timeout, is_upload) {
    url = url || '';
    user = user || '';
    password = password || '';
    data = data || '';
    header = header || {};
    cookies = cookies || '';
    timeout = Number.parseInt(timeout) > 0 ? Number.parseInt(timeout) * 1000 : 3000;
    is_upload = is_upload || false;

    let options = {
        url: url,
        method: method,
        headers: {
            'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; rv:42.0) Gecko/20100101 Firefox/42.0 Sinakoa/0.1'
        },
        gzip : true, // If true, add an Accept-Encoding header to request compressed content encodings from the server (if not already present) and decode supported content encodings in the response
        followRedirect : true, // follow HTTP 3xx responses as redirects
        followAllRedirects : false, // follow non-GET HTTP 3xx responses as redirects (default: false)
        maxRedirects : 2, // the maximum number of redirects to follow
        timeout: timeout
    };

    // other header
    if (header) {
        for (let key in header) {
            options.headers[key] = header[key];
        }
    };

    // upload or post
    if (data) {
        if (is_upload) {
            options.formData = data;
        }else{
            options.form = data;
        }
    };

    // auth
    if (user && password) {
        options.auth = {
            'user' : user,
            'pass' : password,
            'sendImmediately' : false  // sendImmediately defaults to true, which causes a basic or bearer authentication header to be sent. If sendImmediately is false, then request will retry with a proper authentication header after receiving a 401 response from the server (which must contain a WWW-Authenticate header indicating the required authentication method).
        }
    };

    // cookie
    if (cookies) {
        let j = _request.jar();
        for(let key in cookies ){
            let cookie = _request.cookie(key + '=' + cookies[key]);
            j.setCookie(cookie, url);
        }
        options.jar = j;
    };
    return options;
}