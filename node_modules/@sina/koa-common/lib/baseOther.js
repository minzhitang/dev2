/**
 * 获取当前时间戳
 * @return {[type]}   [description]
 */
exports.time = function() {
    //  discuss at: http://phpjs.org/functions/time/
    // original by: GeekFG (http://geekfg.blogspot.com)
    // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // improved by: metjay
    // improved by: HKM
    //   example 1: timeStamp = time();
    //   example 1: timeStamp > 1000000000 && timeStamp < 2000000000
    //   returns 1: true

    return Math.floor(new Date().getTime() / 1000);
};

/**
 * 解析 URL，返回其组成部分
 * @param  {[type]}   str       [description]
 * @param  {[type]}   component [description]
 * @return {[type]}             [description]
 */
exports.parse_url = function(str, component) {
    //       discuss at: http://phpjs.org/functions/parse_url/
    //      original by: Steven Levithan (http://blog.stevenlevithan.com)
    // reimplemented by: Brett Zamir (http://brett-zamir.me)
    //         input by: Lorenzo Pisani
    //         input by: Tony
    //      improved by: Brett Zamir (http://brett-zamir.me)
    //             note: original by http://stevenlevithan.com/demo/parseuri/js/assets/parseuri.js
    //             note: blog post at http://blog.stevenlevithan.com/archives/parseuri
    //             note: demo at http://stevenlevithan.com/demo/parseuri/js/assets/parseuri.js
    //             note: Does not replace invalid characters with '_' as in PHP, nor does it return false with
    //             note: a seriously malformed URL.
    //             note: Besides function name, is essentially the same as parseUri as well as our allowing
    //             note: an extra slash after the scheme/protocol (to allow file:/// as in PHP)
    //        example 1: parse_url('http://username:password@hostname/path?arg=value#anchor');
    //        returns 1: {scheme: 'http', host: 'hostname', user: 'username', pass: 'password', path: '/path', query: 'arg=value', fragment: 'anchor'}

    var query, key = ['source', 'scheme', 'authority', 'userInfo', 'user', 'pass', 'host', 'port',
            'relative', 'path', 'directory', 'file', 'query', 'fragment',
        ],
        ini = (this.php_js && this.php_js.ini) || {},
        mode = (ini['phpjs.parse_url.mode'] &&
            ini['phpjs.parse_url.mode'].local_value) || 'php',
        parser = {
            php: /^(?:([^:\/?#]+):)?(?:\/\/()(?:(?:()(?:([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?))?()(?:(()(?:(?:[^?#\/]*\/)*)()(?:[^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
            strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
            loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/\/?)?((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/ // Added one optional slash to post-scheme to catch file:/// (should restrict this)
        };

    var m = parser[mode].exec(str),
        uri = {},
        i = 14;
    while (i--) {
        if (m[i]) {
            uri[key[i]] = m[i];
        }
    }

    if (component) {
        return uri[component.replace('PHP_URL_', '')
            .toLowerCase()];
    }

    if (mode !== 'php') {
        var name = (ini['phpjs.parse_url.queryKey'] &&
            ini['phpjs.parse_url.queryKey'].local_value) || 'queryKey';
        parser = /(?:^|&)([^&=]*)=?([^&]*)/g;
        uri[name] = {};
        query = uri[key[12]] || '';
        query.replace(parser, function($0, $1, $2) {
            if ($1) {
                uri[name][$1] = $2;
            }
        });
    }

    delete uri.source;
    return uri;
};

/**
 * 获取变量的类型
 * @param  {[type]}   mixed_var [description]
 * @return {[type]}             [description]
 */
exports.gettype = function(mixed_var) {
    //  discuss at: http://phpjs.org/functions/gettype/
    // original by: Paulo Freitas
    // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // improved by: Douglas Crockford (http://javascript.crockford.com)
    // improved by: Brett Zamir (http://brett-zamir.me)
    //    input by: KELAN
    //  depends on: is_float
    //        note: 1.0 is simplified to 1 before it can be accessed by the function, this makes
    //        note: it different from the PHP implementation. We can't fix this unfortunately.
    //   example 1: gettype(1);
    //   returns 1: 'integer'
    //   example 2: gettype(undefined);
    //   returns 2: 'undefined'
    //   example 3: gettype({0: 'Kevin van Zonneveld'});
    //   returns 3: 'object'
    //   example 4: gettype('foo');
    //   returns 4: 'string'
    //   example 5: gettype({0: function () {return false;}});
    //   returns 5: 'object'
    //   example 6: gettype({0: 'test', length: 1, splice: function () {}});
    //   example 6: gettype(['test']);
    //   returns 6: 'object'
    //   returns 6: 'array'

    var s = typeof mixed_var,
        name;
    var getFuncName = function(fn) {
        var name = (/\W*function\s+([\w\$]+)\s*\(/)
            .exec(fn);
        if (!name) {
            return '(Anonymous)';
        }

        return name[1];
    };

    if (s === 'object') {
        if (mixed_var !== null) { // From: http://javascript.crockford.com/remedial.html
            if (typeof mixed_var.length === 'number' && !(mixed_var.propertyIsEnumerable('length')) && typeof mixed_var
                .splice === 'function') {
                s = 'array';
            } else if (mixed_var.constructor && getFuncName(mixed_var.constructor)) {
                name = getFuncName(mixed_var.constructor);
                if (name === 'Date') {
                    s = 'date'; // not in PHP
                } else if (name === 'RegExp') {
                    s = 'regexp'; // not in PHP
                } else if (name === 'PHPJS_Resource') { // Check against our own resource constructor
                    s = 'resource';
                }
            }
        } else {
            s = 'null';
        }
    } else if (s === 'number') {
        s = this.is_float(mixed_var) ? 'double' : 'integer';
    }

    return s;
};
