/**
 * 判断是否在数组中
 * @param  string   needle        要查询的值
 * @param  array   haystack      要查询的数组
 * @param  boolen   argStrict      如果第三个参数 strict 的值为 true 则 in_array() 函数还会检查 needle 的类型是否和 haystack 中的相同
 */
exports.in_array = function(needle, haystack, argStrict) {
    //  discuss at: http://phpjs.org/functions/in_array/
    // original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // improved by: vlado houba
    // improved by: Jonas Sciangula Street (Joni2Back)
    //    input by: Billy
    // bugfixed by: Brett Zamir (http://brett-zamir.me)
    //   example 1: in_array('van', ['Kevin', 'van', 'Zonneveld']);
    //   returns 1: true
    //   example 2: in_array('vlado', {0: 'Kevin', vlado: 'van', 1: 'Zonneveld'});
    //   returns 2: false
    //   example 3: in_array(1, ['1', '2', '3']);
    //   example 3: in_array(1, ['1', '2', '3'], false);
    //   returns 3: true
    //   returns 3: true
    //   example 4: in_array(1, ['1', '2', '3'], true);
    //   returns 4: false

    var key = '',
        strict = !!argStrict;

    //we prevent the double check (strict && arr[key] === ndl) || (!strict && arr[key] == ndl)
    //in just one for, in order to improve the performance
    //deciding wich type of comparation will do before walk array
    if (strict) {
        for (key in haystack) {
            if (haystack[key] === needle) {
                return true;
            }
        }
    } else {
        for (key in haystack) {
            if (haystack[key] == needle) {
                return true;
            }
        }
    }

    return false;
};

/**
 * 删除数组中的某个值
 * @param  string   needle        要删除的值
 * @param  array   haystack      要删除的数组
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2016-01-18
 */
exports.unset = function(needle, haystack) {
    var rs = Array();
    for (key_tmp in haystack) {
        if (key_tmp != needle) {
            rs[key_tmp] = haystack[key_tmp];
        }
    }

    return rs;
};

/**
 * 判断是否是数组
 * @param  obj   obj           要判断的值
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2016-01-18
 */
exports.isArray = function(obj) {
    return Object.prototype.toString.call(obj) === '[object Array]';
};

/**
 * 将一个数组分割成多个
 * @param  array   input         需要操作的数组
 * @param  int   size          每个数组的单元数目
 * @param  boolen   preserve_keys 设为 TRUE，可以使 Node 保留输入数组中原来的键名。如果你指定了 FALSE，那每个结果数组将用从零开始的新数字索引。默认值是 FALSE
 * @return array                 得到的数组是一个多维数组中的单元，其索引从零开始，每一维包含了 size 个元素
 */
exports.array_chunk = function(input, size, preserve_keys) {
    //  discuss at: http://phpjs.org/functions/array_chunk/
    // original by: Carlos R. L. Rodrigues (http://www.jsfromhell.com)
    // improved by: Brett Zamir (http://brett-zamir.me)
    //        note: Important note: Per the ECMAScript specification, objects may not always iterate in a predictable order
    //   example 1: array_chunk(['Kevin', 'van', 'Zonneveld'], 2);
    //   returns 1: [['Kevin', 'van'], ['Zonneveld']]
    //   example 2: array_chunk(['Kevin', 'van', 'Zonneveld'], 2, true);
    //   returns 2: [{0:'Kevin', 1:'van'}, {2: 'Zonneveld'}]
    //   example 3: array_chunk({1:'Kevin', 2:'van', 3:'Zonneveld'}, 2);
    //   returns 3: [['Kevin', 'van'], ['Zonneveld']]
    //   example 4: array_chunk({1:'Kevin', 2:'van', 3:'Zonneveld'}, 2, true);
    //   returns 4: [{1: 'Kevin', 2: 'van'}, {3: 'Zonneveld'}]

    var x, p = '',
        i = 0,
        c = -1,
        l = input.length || 0,
        n = [];

    if (size < 1) {
        return null;
    }

    if (Object.prototype.toString.call(input) === '[object Array]') {
        if (preserve_keys) {
            while (i < l) {
                (x = i % size) ? n[c][i] = input[i] : n[++c] = {}, n[c][i] = input[i];
                i++;
            }
        } else {
            while (i < l) {
                (x = i % size) ? n[c][x] = input[i] : n[++c] = [input[i]];
                i++;
            }
        }
    } else {
        if (preserve_keys) {
            for (p in input) {
                if (input.hasOwnProperty(p)) {
                    (x = i % size) ? n[c][p] = input[p] : n[++c] = {}, n[c][p] = input[p];
                    i++;
                }
            }
        } else {
            for (p in input) {
                if (input.hasOwnProperty(p)) {
                    (x = i % size) ? n[c][x] = input[p] : n[++c] = [input[p]];
                    i++;
                }
            }
        }
    }

    return n;
};

/**
 * 统计数组中所有的值出现的次数
 * @param  array   array 统计这个数组的值
 * @return array         返回一个关联数组，用 array 数组中的值作为键名，该值在数组中出现的次数作为值。
 */
exports.array_count_values = function(array) {
    //  discuss at: http://phpjs.org/functions/array_count_values/
    // original by: Ates Goral (http://magnetiq.com)
    // improved by: Michael White (http://getsprink.com)
    // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    //    input by: sankai
    //    input by: Shingo
    // bugfixed by: Brett Zamir (http://brett-zamir.me)
    //   example 1: array_count_values([ 3, 5, 3, "foo", "bar", "foo" ]);
    //   returns 1: {3:2, 5:1, "foo":2, "bar":1}
    //   example 2: array_count_values({ p1: 3, p2: 5, p3: 3, p4: "foo", p5: "bar", p6: "foo" });
    //   returns 2: {3:2, 5:1, "foo":2, "bar":1}
    //   example 3: array_count_values([ true, 4.2, 42, "fubar" ]);
    //   returns 3: {42:1, "fubar":1}

    var tmp_arr = {},
        key = '',
        t = '';

    var __getType = function(obj) {
        // Objects are php associative arrays.
        var t = typeof obj;
        t = t.toLowerCase();
        if (t === 'object') {
            t = 'array';
        }

        return t;
    };

    var __countValue = function(value) {
        switch (typeof value) {
            case 'number':
                if (Math.floor(value) !== value) {
                    return;
                }

                // Fall-through
            case 'string':
                if (value in this && this.hasOwnProperty(value)) {
                    ++this[value];
                } else {
                    this[value] = 1;
                }
        }
    };

    t = __getType(array);
    if (t === 'array') {
        for (key in array) {
            if (array.hasOwnProperty(key)) {
                __countValue.call(tmp_arr, array[key]);
            }
        }
    }

    return tmp_arr;
};

/**
 * 计算数组的差集
 * @param  array   arr1 要被对比的数组
 * @return array        返回一个数组，该数组包括了所有在 array1 中但是不在任何其它参数数组中的值。注意键名保留不变
 */
exports.array_diff = function(arr1) {
    //  discuss at: http://phpjs.org/functions/array_diff/
    // original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // improved by: Sanjoy Roy
    //  revised by: Brett Zamir (http://brett-zamir.me)
    //   example 1: array_diff(['Kevin', 'van', 'Zonneveld'], ['van', 'Zonneveld']);
    //   returns 1: {0:'Kevin'}

    var retArr = {},
        argl = arguments.length,
        k1 = '',
        i = 1,
        k = '',
        arr = {};

    arr1keys: for (k1 in arr1) {
        for (i = 1; i < argl; i++) {
            arr = arguments[i];
            for (k in arr) {
                if (arr[k] === arr1[k1]) {
                    // If it reaches here, it was found in at least one array, so try next value
                    continue arr1keys;
                }
            }

            retArr[k1] = arr1[k1];
        }
    }

    return retArr;
};

/**
 * 带索引检查计算数组的差集
 * @param  array   arr1 要被对比的数组
 * @return array        [description]
 */
exports.array_diff_assoc = function(arr1) {
    //  discuss at: http://phpjs.org/functions/array_diff_assoc/
    // original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // bugfixed by: 0m3r
    //  revised by: Brett Zamir (http://brett-zamir.me)
    //   example 1: array_diff_assoc({0: 'Kevin', 1: 'van', 2: 'Zonneveld'}, {0: 'Kevin', 4: 'van', 5: 'Zonneveld'});
    //   returns 1: {1: 'van', 2: 'Zonneveld'}

    var retArr = {},
        argl = arguments.length,
        k1 = '',
        i = 1,
        k = '',
        arr = {};

    arr1keys: for (k1 in arr1) {
        for (i = 1; i < argl; i++) {
            arr = arguments[i];
            for (k in arr) {
                if (arr[k] === arr1[k1] && k === k1) {
                    // If it reaches here, it was found in at least one array, so try next value
                    continue arr1keys;
                }
            }

            retArr[k1] = arr1[k1];
        }
    }

    return retArr;
};

/**
 * 使用键名比较计算数组的差集
 * @param  array   arr1 要被对比的数组
 * @return array        [description]
 */
exports.array_diff_key = function(arr1) {
    //  discuss at: http://phpjs.org/functions/array_diff_key/
    // original by: Ates Goral (http://magnetiq.com)
    //  revised by: Brett Zamir (http://brett-zamir.me)
    //    input by: Everlasto
    //   example 1: array_diff_key({red: 1, green: 2, blue: 3, white: 4}, {red: 5});
    //   returns 1: {"green":2, "blue":3, "white":4}
    //   example 2: array_diff_key({red: 1, green: 2, blue: 3, white: 4}, {red: 5}, {red: 5});
    //   returns 2: {"green":2, "blue":3, "white":4}

    var argl = arguments.length,
        retArr = {},
        k1 = '',
        i = 1,
        k = '',
        arr = {};

    arr1keys: for (k1 in arr1) {
        for (i = 1; i < argl; i++) {
            arr = arguments[i];
            for (k in arr) {
                if (k === k1) {
                    // If it reaches here, it was found in at least one array, so try next value
                    continue arr1keys;
                }
            }

            retArr[k1] = arr1[k1];
        }
    }

    return retArr;
};

/**
 * 用给定的值填充数组
 * @param  int   start_index 返回的数组的第一个索引值
 * @param  int   num         插入元素的数量。 必须大于 0
 * @param  string   mixed_val   用来填充的值。
 */
exports.array_fill = function(start_index, num, mixed_val) {
    //  discuss at: http://phpjs.org/functions/array_fill/
    // original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // improved by: Waldo Malqui Silva
    //   example 1: array_fill(5, 6, 'banana');
    //   returns 1: { 5: 'banana', 6: 'banana', 7: 'banana', 8: 'banana', 9: 'banana', 10: 'banana' }

    var key, tmp_arr = {};

    if (!isNaN(start_index) && !isNaN(num)) {
        for (key = 0; key < num; key++) {
            tmp_arr[(key + start_index)] = mixed_val;
        }
    }

    return tmp_arr;
};

/**
 * 使用指定的键和值填充数组
 * @param  {[type]}   keys  使用该数组的值作为键。非法值将被转换为字符串
 * @param  {[type]}   value 填充使用的值
 * @return {[type]}         返回填充后的数组
 */
exports.array_fill_keys = function(keys, value) {
    //  discuss at: http://phpjs.org/functions/array_fill_keys/
    // original by: Brett Zamir (http://brett-zamir.me)
    // bugfixed by: Brett Zamir (http://brett-zamir.me)
    //   example 1: keys = {'a': 'foo', 2: 5, 3: 10, 4: 'bar'}
    //   example 1: array_fill_keys(keys, 'banana')
    //   returns 1: {"foo": "banana", 5: "banana", 10: "banana", "bar": "banana"}

    var retObj = {},
        key = '';

    for (key in keys) {
        retObj[keys[key]] = value;
    }

    return retObj;
};

/**
 * 交换数组中的键和值
 * @param  array   trans 要交换键/值对的数组
 * @return {[type]}         成功时返回交换后的数组，如果失败返回 NULL
 */
exports.array_flip = function(trans) {
    //  discuss at: http://phpjs.org/functions/array_flip/
    // original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // improved by: Pier Paolo Ramon (http://www.mastersoup.com/)
    // improved by: Brett Zamir (http://brett-zamir.me)
    //  depends on: array
    //        test: skip
    //   example 1: array_flip( {a: 1, b: 1, c: 2} );
    //   returns 1: {1: 'b', 2: 'c'}
    //   example 2: ini_set('phpjs.return_phpjs_arrays', 'on');
    //   example 2: array_flip(array({a: 0}, {b: 1}, {c: 2}))[1];
    //   returns 2: 'b'

    var key, tmp_ar = {};

    // Duck-type check for our own array()-created PHPJS_Array
    if (trans && typeof trans === 'object' && trans.change_key_case) {
        return trans.flip();
    }

    for (key in trans) {
        if (!trans.hasOwnProperty(key)) {
            continue;
        }

        tmp_ar[trans[key]] = key;
    }

    return tmp_ar;
};

/**
 * 计算数组的交集
 * @param  array   arr1
 * @return array        返回一个数组，该数组包含了所有在 array1 中也同时出现在所有其它参数数组中的值
 */
exports.array_intersect = function(arr1) {
    //  discuss at: http://phpjs.org/functions/array_intersect/
    // original by: Brett Zamir (http://brett-zamir.me)
    //        note: These only output associative arrays (would need to be
    //        note: all numeric and counting from zero to be numeric)
    //   example 1: $array1 = {'a' : 'green', 0:'red', 1: 'blue'};
    //   example 1: $array2 = {'b' : 'green', 0:'yellow', 1:'red'};
    //   example 1: $array3 = ['green', 'red'];
    //   example 1: $result = array_intersect($array1, $array2, $array3);
    //   returns 1: {0: 'red', a: 'green'}

    var retArr = {},
        argl = arguments.length,
        arglm1 = argl - 1,
        k1 = '',
        arr = {},
        i = 0,
        k = '';

    arr1keys: for (k1 in arr1) {
        arrs: for (i = 1; i < argl; i++) {
            arr = arguments[i];
            for (k in arr) {
                if (arr[k] === arr1[k1]) {
                    if (i === arglm1) {
                        retArr[k1] = arr1[k1];
                    }

                    // If the innermost loop always leads at least once to an equal value, continue the loop until done
                    continue arrs;
                }
            }

            // If it reaches here, it wasn't found in at least one array, so try next value
            continue arr1keys;
        }
    }

    return retArr;
};

/**
 * 带索引检查计算数组的交集
 * @param  {[type]}   arr1 [description]
 * @return {[type]}        [description]
 */
exports.array_intersect_assoc = function(arr1) {
    //  discuss at: http://phpjs.org/functions/array_intersect_assoc/
    // original by: Brett Zamir (http://brett-zamir.me)
    //        note: These only output associative arrays (would need to be
    //        note: all numeric and counting from zero to be numeric)
    //   example 1: $array1 = {a: 'green', b: 'brown', c: 'blue', 0: 'red'}
    //   example 1: $array2 = {a: 'green', 0: 'yellow', 1: 'red'}
    //   example 1: array_intersect_assoc($array1, $array2)
    //   returns 1: {a: 'green'}

    var retArr = {},
        argl = arguments.length,
        arglm1 = argl - 1,
        k1 = '',
        arr = {},
        i = 0,
        k = '';

    arr1keys: for (k1 in arr1) {
        arrs: for (i = 1; i < argl; i++) {
            arr = arguments[i];
            for (k in arr) {
                if (arr[k] === arr1[k1] && k === k1) {
                    if (i === arglm1) {
                        retArr[k1] = arr1[k1];
                    }

                    // If the innermost loop always leads at least once to an equal value, continue the loop until done
                    continue arrs;
                }
            }

            // If it reaches here, it wasn't found in at least one array, so try next value
            continue arr1keys;
        }
    }

    return retArr;
};

/**
 * 使用键名比较计算数组的交集
 * @param  {[type]}   arr1 [description]
 * @return {[type]}        [description]
 */
exports.array_intersect_key = function(arr1) {
    //  discuss at: http://phpjs.org/functions/array_intersect_key/
    // original by: Brett Zamir (http://brett-zamir.me)
    //        note: These only output associative arrays (would need to be
    //        note: all numeric and counting from zero to be numeric)
    //   example 1: $array1 = {a: 'green', b: 'brown', c: 'blue', 0: 'red'}
    //   example 1: $array2 = {a: 'green', 0: 'yellow', 1: 'red'}
    //   example 1: array_intersect_key($array1, $array2)
    //   returns 1: {0: 'red', a: 'green'}

    var retArr = {},
        argl = arguments.length,
        arglm1 = argl - 1,
        k1 = '',
        arr = {},
        i = 0,
        k = '';

    arr1keys: for (k1 in arr1) {
        arrs: for (i = 1; i < argl; i++) {
            arr = arguments[i];
            for (k in arr) {
                if (k === k1) {
                    if (i === arglm1) {
                        retArr[k1] = arr1[k1];
                    }

                    // If the innermost loop always leads at least once to an equal value, continue the loop until done
                    continue arrs;
                }
            }

            // If it reaches here, it wasn't found in at least one array, so try next value
            continue arr1keys;
        }
    }

    return retArr;
};

/**
 * 检查给定的键名或索引是否存在于数组中
 * @param  {[type]}   key    [description]
 * @param  {[type]}   search [description]
 * @return {[type]}          [description]
 */
exports.array_key_exists = function(key, search) {
    //  discuss at: http://phpjs.org/functions/array_key_exists/
    // original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // improved by: Felix Geisendoerfer (http://www.debuggable.com/felix)
    //   example 1: array_key_exists('kevin', {'kevin': 'van Zonneveld'});
    //   returns 1: true

    if (!search || (search.constructor !== Array && search.constructor !== Object)) {
        return false;
    }

    return key in search;
};

/**
 * 返回数组中所有的键名
 * @param  {[type]}   input        [description]
 * @param  {[type]}   search_value [description]
 * @param  {[type]}   argStrict    [description]
 * @return {[type]}                [description]
 */
exports.array_keys = function(input, search_value, argStrict) {
    //  discuss at: http://phpjs.org/functions/array_keys/
    // original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    //    input by: Brett Zamir (http://brett-zamir.me)
    //    input by: P
    // bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // bugfixed by: Brett Zamir (http://brett-zamir.me)
    // improved by: jd
    // improved by: Brett Zamir (http://brett-zamir.me)
    //   example 1: array_keys( {firstname: 'Kevin', surname: 'van Zonneveld'} );
    //   returns 1: {0: 'firstname', 1: 'surname'}

    var search = typeof search_value !== 'undefined',
        tmp_arr = [],
        strict = !!argStrict,
        include = true,
        key = '';

    if (input && typeof input === 'object' && input.change_key_case) { // Duck-type check for our own array()-created PHPJS_Array
        return input.keys(search_value, argStrict);
    }

    for (key in input) {
        if (input.hasOwnProperty(key)) {
            include = true;
            if (search) {
                if (strict && input[key] !== search_value) {
                    include = false;
                } else if (input[key] != search_value) {
                    include = false;
                }
            }

            if (include) {
                tmp_arr[tmp_arr.length] = key;
            }
        }
    }

    return tmp_arr;
};

/**
 * 合并一个或多个数组
 * @param  {[type]}   input     [description]
 * @param  {[type]}   pad_size  [description]
 * @param  {[type]}   pad_value [description]
 * @return {[type]}             [description]
 */
exports.array_merge = function() {
    //  discuss at: http://phpjs.org/functions/array_merge/
    // original by: Brett Zamir (http://brett-zamir.me)
    // bugfixed by: Nate
    // bugfixed by: Brett Zamir (http://brett-zamir.me)
    //    input by: josh
    //   example 1: arr1 = {"color": "red", 0: 2, 1: 4}
    //   example 1: arr2 = {0: "a", 1: "b", "color": "green", "shape": "trapezoid", 2: 4}
    //   example 1: array_merge(arr1, arr2)
    //   returns 1: {"color": "green", 0: 2, 1: 4, 2: "a", 3: "b", "shape": "trapezoid", 4: 4}
    //   example 2: arr1 = []
    //   example 2: arr2 = {1: "data"}
    //   example 2: array_merge(arr1, arr2)
    //   returns 2: {0: "data"}

    var args = Array.prototype.slice.call(arguments),
        argl = args.length,
        arg,
        retObj = {},
        k = '',
        argil = 0,
        j = 0,
        i = 0,
        ct = 0,
        toStr = Object.prototype.toString,
        retArr = true;

    for (i = 0; i < argl; i++) {
        if (toStr.call(args[i]) !== '[object Array]') {
            retArr = false;
            break;
        }
    }

    if (retArr) {
        retArr = [];
        for (i = 0; i < argl; i++) {
            retArr = retArr.concat(args[i]);
        }

        return retArr;
    }

    for (i = 0, ct = 0; i < argl; i++) {
        arg = args[i];
        if (toStr.call(arg) === '[object Array]') {
            for (j = 0, argil = arg.length; j < argil; j++) {
                retObj[ct++] = arg[j];
            }
        } else {
            for (k in arg) {
                if (arg.hasOwnProperty(k)) {
                    if (parseInt(k, 10) + '' === k) {
                        retObj[ct++] = arg[k];
                    } else {
                        retObj[k] = arg[k];
                    }
                }
            }
        }
    }

    return retObj;
};

/**
 * 用值将数组填补到指定长度
 * @param  {[type]}   input     [description]
 * @param  {[type]}   pad_size  [description]
 * @param  {[type]}   pad_value [description]
 * @return {[type]}             [description]
 */
exports.array_pad = function(input, pad_size, pad_value) {
    //  discuss at: http://phpjs.org/functions/array_pad/
    // original by: Waldo Malqui Silva
    //   example 1: array_pad([ 7, 8, 9 ], 2, 'a');
    //   returns 1: [ 7, 8, 9]
    //   example 2: array_pad([ 7, 8, 9 ], 5, 'a');
    //   returns 2: [ 7, 8, 9, 'a', 'a']
    //   example 3: array_pad([ 7, 8, 9 ], 5, 2);
    //   returns 3: [ 7, 8, 9, 2, 2]
    //   example 4: array_pad([ 7, 8, 9 ], -5, 'a');
    //   returns 4: [ 'a', 'a', 7, 8, 9 ]

    var pad = [],
        newArray = [],
        newLength,
        diff = 0,
        i = 0;

    if (Object.prototype.toString.call(input) === '[object Array]' && !isNaN(pad_size)) {
        newLength = ((pad_size < 0) ? (pad_size * -1) : pad_size);
        diff = newLength - input.length;

        if (diff > 0) {
            for (i = 0; i < diff; i++) {
                newArray[i] = pad_value;
            }

            pad = ((pad_size < 0) ? newArray.concat(input) : input.concat(newArray));
        } else {
            pad = input;
        }
    }

    return pad;
};

/**
 * 将数组最后一个单元弹出（出栈）
 * @param  {[type]}   inputArr [description]
 * @return {[type]}            [description]
 */
exports.array_pop = function(inputArr) {
    //  discuss at: http://phpjs.org/functions/array_pop/
    // original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    //    input by: Brett Zamir (http://brett-zamir.me)
    //    input by: Theriault
    // bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // bugfixed by: Brett Zamir (http://brett-zamir.me)
    //        note: While IE (and other browsers) support iterating an object's
    //        note: own properties in order, if one attempts to add back properties
    //        note: in IE, they may end up in their former position due to their position
    //        note: being retained. So use of this function with "associative arrays"
    //        note: (objects) may lead to unexpected behavior in an IE environment if
    //        note: you add back properties with the same keys that you removed
    //   example 1: array_pop([0,1,2]);
    //   returns 1: 2
    //   example 2: data = {firstName: 'Kevin', surName: 'van Zonneveld'};
    //   example 2: lastElem = array_pop(data);
    //   example 2: $result = data
    //   returns 2: {firstName: 'Kevin'}

    var key = '',
        lastKey = '';

    if (inputArr.hasOwnProperty('length')) {
        // Indexed
        if (!inputArr.length) {
            // Done popping, are we?
            return null;
        }

        return inputArr.pop();
    } else {
        // Associative
        for (key in inputArr) {
            if (inputArr.hasOwnProperty(key)) {
                lastKey = key;
            }
        }

        if (lastKey) {
            var tmp = inputArr[lastKey];
            delete(inputArr[lastKey]);
            return tmp;
        } else {
            return null;
        }
    }
};

/**
 * 将一个或多个单元压入数组的末尾（入栈）
 * @param  {[type]}   inputArr [description]
 * @return {[type]}            [description]
 */
exports.array_push = function(inputArr) {
    //  discuss at: http://phpjs.org/functions/array_push/
    // original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // improved by: Brett Zamir (http://brett-zamir.me)
    //        note: Note also that IE retains information about property position even
    //        note: after being supposedly deleted, so if you delete properties and then
    //        note: add back properties with the same keys (including numeric) that had
    //        note: been deleted, the order will be as before; thus, this function is not
    //        note: really recommended with associative arrays (objects) in IE environments
    //   example 1: array_push(['kevin','van'], 'zonneveld');
    //   returns 1: 3

    var i = 0,
        pr = '',
        argv = arguments,
        argc = argv.length,
        allDigits = /^\d$/,
        size = 0,
        highestIdx = 0,
        len = 0;
    if (inputArr.hasOwnProperty('length')) {
        for (i = 1; i < argc; i++) {
            inputArr[inputArr.length] = argv[i];
        }

        return inputArr.length;
    }

    // Associative (object)
    for (pr in inputArr) {
        if (inputArr.hasOwnProperty(pr)) {
            ++len;
            if (pr.search(allDigits) !== -1) {
                size = parseInt(pr, 10);
                highestIdx = size > highestIdx ? size : highestIdx;
            }
        }
    }

    for (i = 1; i < argc; i++) {
        inputArr[++highestIdx] = argv[i];
    }

    return len + i - 1;
};

/**
 * 从数组中随机取出一个或多个单元
 * @param  {[type]}   input   [description]
 * @param  {[type]}   num_req [description]
 * @return {[type]}           [description]
 */
exports.array_rand = function(input, num_req) {
    //  discuss at: http://phpjs.org/functions/array_rand/
    // original by: Waldo Malqui Silva
    //   example 1: array_rand( ['Kevin'], 1 );
    //   returns 1: 0

    var indexes = [];
    var res = [];
    var ticks = num_req || 1;
    var checkDuplicate = function(input, value) {
        var exist = false,
            index = 0,
            il = input.length;
        while (index < il) {
            if (input[index] === value) {
                exist = true;
                break;
            }

            index++;
        }

        return exist;
    };

    if (Object.prototype.toString.call(input) === '[object Array]' && ticks <= input.length) {
        while (true) {
            var rand = Math.floor((Math.random() * input.length));
            if (indexes.length === ticks) {
                break;
            }

            if (!checkDuplicate(indexes, rand)) {
                indexes.push(rand);
                res.push(input[rand]);
            }
        }
    } else {
        indexes = null;
    }

    return ticks == 1 ? res[0] : res;
};

/**
 * 在数组中搜索给定的值，如果成功则返回相应的键名
 * @param  {[type]}   needle    [description]
 * @param  {[type]}   haystack  [description]
 * @param  {[type]}   argStrict [description]
 * @return {[type]}             [description]
 */
exports.array_search = function(needle, haystack, argStrict) {
    //  discuss at: http://phpjs.org/functions/array_search/
    // original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    //    input by: Brett Zamir (http://brett-zamir.me)
    // bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    //  depends on: array
    //        test: skip
    //   example 1: array_search('zonneveld', {firstname: 'kevin', middle: 'van', surname: 'zonneveld'});
    //   returns 1: 'surname'
    //   example 2: ini_set('phpjs.return_phpjs_arrays', 'on');
    //   example 2: var ordered_arr = array({3:'value'}, {2:'value'}, {'a':'value'}, {'b':'value'});
    //   example 2: var key = array_search(/val/g, ordered_arr); // or var key = ordered_arr.search(/val/g);
    //   returns 2: '3'

    var strict = !!argStrict,
        key = '';

    if (haystack && typeof haystack === 'object' && haystack.change_key_case) { // Duck-type check for our own array()-created PHPJS_Array
        return haystack.search(needle, argStrict);
    }

    if (typeof needle === 'object' && needle.exec) { // Duck-type for RegExp
        if (!strict) { // Let's consider case sensitive searches as strict
            var flags = 'i' + (needle.global ? 'g' : '') +
                (needle.multiline ? 'm' : '') +
                (needle.sticky ? 'y' : ''); // sticky is FF only
            needle = new RegExp(needle.source, flags);
        }

        for (key in haystack) {
            if (needle.test(haystack[key])) {
                return key;
            }
        }

        return false;
    }

    for (key in haystack) {
        if ((strict && haystack[key] === needle) || (!strict && haystack[key] == needle)) {
            return key;
        }
    }

    return false;
};

/**
 * 将数组开头的单元移出数组
 * @param  {[type]}   inputArr [description]
 * @return {[type]}            [description]
 */
exports.array_shift = function(inputArr) {
    //  discuss at: http://phpjs.org/functions/array_shift/
    // original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // improved by: Martijn Wieringa
    //        note: Currently does not handle objects
    //   example 1: array_shift(['Kevin', 'van', 'Zonneveld']);
    //   returns 1: 'Kevin'

    var props = false,
        shift = undefined,
        pr = '',
        allDigits = /^\d$/,
        int_ct = -1,
        _checkToUpIndices = function(arr, ct, key) {
            // Deal with situation, e.g., if encounter index 4 and try to set it to 0, but 0 exists later in loop (need to
            // increment all subsequent (skipping current key, since we need its value below) until find unused)
            if (arr[ct] !== undefined) {
                var tmp = ct;
                ct += 1;
                if (ct === key) {
                    ct += 1;
                }

                ct = _checkToUpIndices(arr, ct, key);
                arr[ct] = arr[tmp];
                delete arr[tmp];
            }

            return ct;
        };

    if (inputArr.length === 0) {
        return null;
    }

    if (inputArr.length > 0) {
        return inputArr.shift();
    }

    /*
    UNFINISHED FOR HANDLING OBJECTS
    for (pr in inputArr) {
      if (inputArr.hasOwnProperty(pr)) {
        props = true;
        shift = inputArr[pr];
        delete inputArr[pr];
        break;
      }
    }
    for (pr in inputArr) {
      if (inputArr.hasOwnProperty(pr)) {
        if (pr.search(allDigits) !== -1) {
          int_ct += 1;
          if (parseInt(pr, 10) === int_ct) { // Key is already numbered ok, so don't need to change key for value
            continue;
          }
          _checkToUpIndices(inputArr, int_ct, pr);
          arr[int_ct] = arr[pr];
          delete arr[pr];
        }
      }
    }
    if (!props) {
      return null;
    }
    return shift;
    */
};

/**
 * 从数组中取出一段
 * @param  {[type]}   arr           [description]
 * @param  {[type]}   offst         [description]
 * @param  {[type]}   lgth          [description]
 * @param  {[type]}   preserve_keys [description]
 * @return {[type]}                 [description]
 */
exports.array_slice = function(arr, offst, lgth, preserve_keys) {
    //  discuss at: http://phpjs.org/functions/array_slice/
    // original by: Brett Zamir (http://brett-zamir.me)
    //  depends on: is_int
    //    input by: Brett Zamir (http://brett-zamir.me)
    // bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    //        note: Relies on is_int because !isNaN accepts floats
    //   example 1: array_slice(["a", "b", "c", "d", "e"], 2, -1);
    //   returns 1: {0: 'c', 1: 'd'}
    //   example 2: array_slice(["a", "b", "c", "d", "e"], 2, -1, true);
    //   returns 2: {2: 'c', 3: 'd'}

    /*
    if ('callee' in arr && 'length' in arr) {
      arr = Array.prototype.slice.call(arr);
    }
    */

    var key = '';

    if (Object.prototype.toString.call(arr) !== '[object Array]' ||
        (preserve_keys && offst !== 0)) { // Assoc. array as input or if required as output
        var lgt = 0,
            newAssoc = {};
        for (key in arr) {
            //if (key !== 'length') {
            lgt += 1;
            newAssoc[key] = arr[key];

            //}
        }

        arr = newAssoc;

        offst = (offst < 0) ? lgt + offst : offst;
        lgth = lgth === undefined ? lgt : (lgth < 0) ? lgt + lgth - offst : lgth;

        var assoc = {};
        var start = false,
            it = -1,
            arrlgth = 0,
            no_pk_idx = 0;
        for (key in arr) {
            ++it;
            if (arrlgth >= lgth) {
                break;
            }

            if (it == offst) {
                start = true;
            }

            if (!start) {
                continue;
            }++arrlgth;

            if (this.is_int(key) && !preserve_keys) {
                assoc[no_pk_idx++] = arr[key];
            } else {
                assoc[key] = arr[key];
            }
        }

        //assoc.length = arrlgth; // Make as array-like object (though length will not be dynamic)
        return assoc;
    }

    if (lgth === undefined) {
        return arr.slice(offst);
    } else if (lgth >= 0) {
        return arr.slice(offst, offst + lgth);
    } else {
        return arr.slice(offst, lgth);
    }
};

/**
 * 移除数组中重复的值
 * @param  {[type]}   inputArr [description]
 * @return {[type]}            [description]
 */
exports.array_unique = function(inputArr) {
    //  discuss at: http://phpjs.org/functions/array_unique/
    // original by: Carlos R. L. Rodrigues (http://www.jsfromhell.com)
    //    input by: duncan
    //    input by: Brett Zamir (http://brett-zamir.me)
    // bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // bugfixed by: Nate
    // bugfixed by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // bugfixed by: Brett Zamir (http://brett-zamir.me)
    // improved by: Michael Grier
    //        note: The second argument, sort_flags is not implemented;
    //        note: also should be sorted (asort?) first according to docs
    //   example 1: array_unique(['Kevin','Kevin','van','Zonneveld','Kevin']);
    //   returns 1: {0: 'Kevin', 2: 'van', 3: 'Zonneveld'}
    //   example 2: array_unique({'a': 'green', 0: 'red', 'b': 'green', 1: 'blue', 2: 'red'});
    //   returns 2: {a: 'green', 0: 'red', 1: 'blue'}

    var key = '',
        tmp_arr2 = {},
        val = '';

    var __array_search = function(needle, haystack) {
        var fkey = '';
        for (fkey in haystack) {
            if (haystack.hasOwnProperty(fkey)) {
                if ((haystack[fkey] + '') === (needle + '')) {
                    return fkey;
                }
            }
        }

        return false;
    };

    for (key in inputArr) {
        if (inputArr.hasOwnProperty(key)) {
            val = inputArr[key];
            if (false === __array_search(val, tmp_arr2)) {
                tmp_arr2[key] = val;
            }
        }
    }

    return tmp_arr2;
};

/**
 * 在数组开头插入一个或多个单元
 * @param  {[type]}   array [description]
 * @return {[type]}         [description]
 */
exports.array_unshift = function(array) {
    //  discuss at: http://phpjs.org/functions/array_unshift/
    // original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // improved by: Martijn Wieringa
    // improved by: jmweb
    //        note: Currently does not handle objects
    //   example 1: array_unshift(['van', 'Zonneveld'], 'Kevin');
    //   returns 1: 3

    var i = arguments.length;

    while (--i !== 0) {
        arguments[0].unshift(arguments[i]);
    }

    return arguments[0].length;
};

/**
 * 返回数组中所有的值
 * @param  {[type]}   input [description]
 * @return {[type]}         [description]
 */
exports.array_values = function(input) {
    //  discuss at: http://phpjs.org/functions/array_values/
    // original by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // improved by: Brett Zamir (http://brett-zamir.me)
    //   example 1: array_values( {firstname: 'Kevin', surname: 'van Zonneveld'} );
    //   returns 1: {0: 'Kevin', 1: 'van Zonneveld'}

    var tmp_arr = [],
        key = '';

    if (input && typeof input === 'object' && input.change_key_case) { // Duck-type check for our own array()-created PHPJS_Array
        return input.values();
    }

    for (key in input) {
        tmp_arr[tmp_arr.length] = input[key];
    }

    return tmp_arr;
};
