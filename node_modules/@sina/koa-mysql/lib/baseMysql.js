'use strict';

var mysql = require('mysql');
var wrapper = require('co-mysql');

/**
 * mysql 操作类
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2015-12-23
 */
class Mysql {

    /**
     * @param  obj   _dbConfig  数据库配置
     * @param  string   _tableName 表名
     * @param  string/number   _tableId   分表id
     *
     * @author wangkun5 <wangkun5@staff.sina.com.cn>
     * @date   2015-12-23
     */
    constructor(_dbConfig, _tableName, _tableId) {

        /**
         * sql语句占位符
         * @type {Object}
         */
        this.sqlPlaceholders = {};

        /**
         * sql语句占位符的值，只用在where
         * @type {Array}
         */
        this.sqlData = [];

        /**
         * 当前查询的sql
         * @type {String}
         */
        this.sql = '';

        /**
         * 查询结果集
         * @type {String}
         */
        this.rs = '';

        /**
         * 默认order
         * @type {String}
         */
        this.sort = 'DESC';

        /**
         * 默认页码
         * @type {Number}
         */
        this.page = 1;

        /**
         * 默认分页尺寸
         * @type {Number}
         */
        this.pageSize = 20;

        /**
         * 当前结果集的行数
         * @type {Number}
         */
        this.countNum = 0;

        /**
         * debug
         * @type {Boolean}
         */
        this.debug = _dbConfig.debug || false;

        // this.runTime = 0;

        /**
         * 当前表名
         * @type {String}
         */
        this.tableName = '';

        /**
         * master 配置
         * @type {Object}
         */
        var masterOptions = {
            host: _dbConfig.master.host || '',
            port: _dbConfig.master.port || '',
            database: _dbConfig.master.database || '',
            user: _dbConfig.master.user || '',
            password: _dbConfig.master.password || '',
            charset: _dbConfig.master.charset || 'utf8_general_ci',
            timezone: _dbConfig.master.timezone || 'local',
            connectTimeout: _dbConfig.master.connectTimeout || 150,
        };

        /**
         * slave 配置
         * @type {Object}
         */
        var slaveOptions = {
            host: _dbConfig.slave.host || '',
            port: _dbConfig.slave.port || '',
            database: _dbConfig.slave.database || '',
            user: _dbConfig.slave.user || '',
            password: _dbConfig.slave.password || '',
            charset: _dbConfig.slave.charset || 'utf8_general_ci',
            timezone: _dbConfig.slave.timezone || 'local',
            connectTimeout: _dbConfig.slave.connectTimeout || 150,
        };

        // var poolCluster = mysql.createPoolCluster();
        // poolCluster.add('MASTER', masterOptions);
        // poolCluster.add('SLAVE', slaveOptions);

        // this.poolCluster = wrapper(wrapper);

        /**
         * 主从链接
         * @type {[type]}
         */
        var masterPool = mysql.createPool(masterOptions);
        var slavePool = mysql.createPool(slaveOptions);

        this.masterDb = wrapper(masterPool);
        this.slaveDb = wrapper(slavePool);

        /**
         * 初始化当前表名
         */
        this._setTable(_tableName, _tableId);
    }

    /**
     * 设置当前表名
     * @param  string   tableName 表名
     * @param  string/number   tableId   分表ID
     *
     * @author wangkun5 <wangkun5@staff.sina.com.cn>
     * @date   2015-12-24
     */
    _setTable(tableName, tableId) {
        tableId = tableId || '';
        if (typeof (tableName) != 'string') {
            _error(0, '表名实例化错误，表名应该是 String 格式');
        }

        this.tableName = tableId ? tableName + '_' + tableId : tableName;
    }

    /**
     * 组装sql
     *
     * @author wangkun5 <wangkun5@staff.sina.com.cn>
     * @date   2015-12-23
     */
    _setSql() {
        this.sql = 'SELECT ' + this.sqlPlaceholders.select + ' FROM ' + this.tableName;
        if (this.sqlPlaceholders.where) {
            this.sql += ' WHERE ' + this.sqlPlaceholders.where;
        }

        if (this.sqlPlaceholders.group) {
            this.sql += ' GROUP BY ' + this.sqlPlaceholders.group;
        }

        if (this.sqlPlaceholders.orderBy) {
            this.sql += ' ORDER BY ' + this.sqlPlaceholders.orderBy;
        }

        if (this.sqlPlaceholders.limit) {
            this.sql += ' LIMIT ' + this.sqlPlaceholders.limit;
        }

        this._formatSql();
    }

    /**
     * 格式化sql，mysql类中会过滤参数
     *
     * @author wangkun5 <wangkun5@staff.sina.com.cn>
     * @date   2015-12-25
     */
    _formatSql() {
        this.sql = mysql.format(this.sql, this.sqlData);
        if (this.debug) {
            console.log('<------------ SQL ------------>');
            console.log(this.sql);
            console.log('<------------ SQL ------------>');
        }
    }

    /**
     * 清楚上次操作的数据
     *
     * 和PHP不一样，常驻内存，上次的数据都还在
     *
     * @author wangkun5 <wangkun5@staff.sina.com.cn>
     * @date   2016-03-03
     */
    _clear() {
        this.sqlPlaceholders = {};
        this.sqlData = [];
    }

    /**
     * 内部执行sql
     * @param  string   master_or_slave 主从
     *
     * @author wangkun5 <wangkun5@staff.sina.com.cn>
     * @date   2015-12-23
     */
    * _exec(master_or_slave) {
        master_or_slave = master_or_slave || 'slave';

        let _db = master_or_slave == 'slave' ? this.slaveDb : this.masterDb;

        this.rs = yield _db.query(this.sql, this.sqlData)
            .then(function(value) {
                return value;
            }).catch(function(err) {
                _error(err.errno, err);
            });
    }

    /**
     * 设置总数
     * @param  string   master_or_slave 主从
     *
     * @author wangkun5 <wangkun5@staff.sina.com.cn>
     * @date   2015-12-25
     */
    * _setCountNum(master_or_slave) {
        master_or_slave = master_or_slave || 'slave';

        this.sql = 'SELECT count(*) AS num FROM ' + this.tableName;
        if (this.sqlPlaceholders.where) {
            this.sql += ' WHERE ' + this.sqlPlaceholders.where;
        }

        this._formatSql();

        yield this._exec(master_or_slave);
        this.countNum = this.rs[0].num;
    }

}

/**
 * 设置查询字段
 *
 * mysql组件在设置绑定参数的时候，查询字段传递*会报错，晕死。。如果是*必须写到sql语句中
 *
 * mysql 组件支持该参数支持 array，这里待支持
 *
 * @param  string   select 要查询的字段
 * @return obj
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2015-12-23
 */
Mysql.prototype.select = function(select) {
    select = select || '*';
    if (typeof (select) != 'string') {
        _error(0, '查询字段类型错误，请确保查询字段类型为 String 或 Array');
    }

    this.sqlPlaceholders.select = select;
    return this;
};

/**
 * 设置查询条件
 *
 * 支持 { id : 1 }
 *     { name : { sign: '>/>=/</<=', val: 2 } }
 *     { name : { sign: 'like', val: '%小明%' } }
 *     { id : { sign: 'in', val: [1,2] }}
 *
 * @param  obj   where 查询条件
 * @return obj
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2015-12-23
 */
Mysql.prototype.where = function(whereObj) {
    let _whereArr = [];
    this.sqlData = [];
    for (let key in whereObj) {
        let val = whereObj[key];
        this.sqlData.push(key);
        if (typeof (val) == 'object') {
            _whereArr.push('?? ' + val.sign + ' ?');
            if (val.sign.toLocaleUpperCase() == 'IN') {
                val.val = [val.val];
            }

            this.sqlData.push(val.val);
        } else {
            _whereArr.push('?? = ?');
            this.sqlData.push(whereObj[key]);
        }
    }

    this.sqlPlaceholders.where = _whereArr.join(' AND ');
    return this;
};

/**
 * 设置分组查询
 * @param  string   group 分组条件
 * @return obj
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2015-12-23
 */
Mysql.prototype.group = function(group) {
    group = group || '';
    if (typeof (group) != 'string') {
        _error(0, '查询group格式错误，请确保group格式为 String');
    }

    if (group) {
        this.sqlPlaceholders.group = group;
    }

    return this;
};

/**
 * 设置排序条件
 * @param  string   orderObj 排序对象
 * @return obj
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2015-12-23
 */
Mysql.prototype.orderBy = function(orderObj) {
    orderObj = orderObj || '';
    var orderByStr = [];
    if (orderObj) {
        for (var orderKey in orderObj) {
            let orderSort = orderObj[orderKey] ? orderObj[orderKey].toLocaleUpperCase() : this.sort;
            orderByStr.push(orderKey + ' ' + orderSort);
        }
    };

    this.sqlPlaceholders.orderBy = orderByStr.join();

    return this;
};

/**
 * 设置分页参数
 * @param  int   page     页码
 * @param  int   pageSize 页面尺寸
 * @return obj
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2015-12-23
 */
Mysql.prototype.limit = function(page, pageSize) {
    this.page = page ? Number.parseInt(page) : 1;
    this.pageSize = pageSize ? Number.parseInt(pageSize) : this.pageSize;
    if (this.page > 0) {
        let _limit = (this.page - 1) * this.pageSize;
        this.sqlPlaceholders.limit = _limit + ',' + this.pageSize;
    }

    return this;
};

/**
 * 返回当前执行的sql
 * @return string
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2015-12-23
 */
Mysql.prototype.getSql = function() {
    return this.sql;
};

/**
 * 获取一条数据
 * @param  string   master_or_slave 主从
 * @return obj
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2015-12-23
 */
Mysql.prototype.one = function*(master_or_slave) {
    this.sqlPlaceholders.limit = 1;
    this._setSql();
    yield this._exec(master_or_slave);
    this._clear();
    this.rs = JSON.parse(JSON.stringify(this.rs));
    if (this.rs.length != 0) {
        this.countNum = 1;
        return this.rs[0];
    } else {
        this.countNum = 0;
        return null;
    }
};

/**
 * 获取一条数据的一个字段的值, 多个查询字段只返回第一个字段的值
 * @param  string   master_or_slave 主从
 * @return obj
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2015-12-23
 */
Mysql.prototype.first = function*(master_or_slave) {
    if (this.sqlPlaceholders.select == '*') {
        _error(0, 'first 方法的查询参数错误，不能是 *');
    }

    let _key = this.sqlPlaceholders.select.split(',');
    let _rs = yield this.one(master_or_slave);
    if (_rs) {
        return _rs[_key[0]];
    } else {
        return null;
    }
};

/**
 * 获取多条结果集
 * @param  string   master_or_slave 主从
 * @return  obj
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2015-12-23
 */
Mysql.prototype.all = function*(master_or_slave) {
    yield this._setCountNum(master_or_slave);

    if (this.countNum) {
        /**
         * 用对象重新覆盖了上边_setCountNum的this.sql
         */
        this._setSql();
        yield this._exec(master_or_slave);
        this.rs = JSON.parse(JSON.stringify(this.rs));
    } else {
        this.rs = null;
    }

    this._clear();

    return this.rs;
};

/**
 * 插入数据
 * @param  obj   insertObj        要插入的字段
 * @return int   新插入数据的id
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2015-12-23
 */
Mysql.prototype.insert = function*(insertObj) {
    this.sqlData = [];
    let _insertArr = [];
    for (let key in insertObj) {
        _insertArr.push('?? = ?');
        this.sqlData.push(key);
        this.sqlData.push(insertObj[key]);
    }

    this.sql = 'INSERT INTO `' + this.tableName + '` SET ' + _insertArr.join(', ');
    this._formatSql();
    yield this._exec('master');
    return this.rs.insertId;
};

/**
 * 删除数据
 * @param  obj   whereObj      条件
 * @return  int   删除数据的行数
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2015-12-23
 */
Mysql.prototype.delete = function*(whereObj) {
    this.where(whereObj);
    this.sql = 'DELETE FROM `' + this.tableName + '` WHERE ' + this.sqlPlaceholders.where;
    this._formatSql();
    yield this._exec('master');
    this._clear();
    return this.rs.affectedRows;
};

/**
 * 更新数据
 * @param  obj   updateObj     要更新的数据
 * @param  obj   whereObj      更新条件
 * @return  int   影响行数
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2015-12-23
 */
Mysql.prototype.update = function*(updateObj, whereObj) {
    /**
     * 注意参数的绑定顺序
     */
    this.where(whereObj);
    let _updateArr = [];
    let _updateData = [];
    for (let key in updateObj) {
        _updateArr.push('?? = ?');
        _updateData.push(key);
        _updateData.push(updateObj[key]);
    }

    this.sqlData = _updateData.concat(this.sqlData);

    this.sql = 'UPDATE `' + this.tableName + '` SET ' + _updateArr.join(', ') + ' WHERE ' + this.sqlPlaceholders.where;
    this._formatSql();
    yield this._exec('master');
    this._clear();
    return this.rs.changedRows;
};

/**
 * 查询sql
 * @param  string   sql             要执行的sql
 * @param  string   master_or_slave 主从
 * @return
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2015-12-23
 */
Mysql.prototype.query = function*(sql, master_or_slave) {
    this.sql = sql || this.sql;
    if (this.sql) {
        yield this._exec(master_or_slave);
    }

    return this.rs;
};

/**
 * 返回结果集的行数
 * @yield  int
 *
 * @author wangkun5 <wangkun5@staff.sina.com.cn>
 * @date   2015-12-23
 */
Mysql.prototype.getCountNum = function*(master_or_slave) {
    if (!this.countNum) {
        yield this._setCountNum(master_or_slave);
    };

    return this.countNum;
};

function _error(code, msg) {
    var err = new Error(msg);
    err.errCode = 1;
    throw err;
}

module.exports = Mysql;
